// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package logs

import (
	"context"
)

const deleteLogById = `-- name: DeleteLogById :exec
DELETE FROM logs
WHERE id = ?
`

type DeleteLogByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteLogById
//
//	DELETE FROM logs
//	WHERE id = ?
func (q *Queries) DeleteLogById(ctx context.Context, arg DeleteLogByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteLogById, arg.ID)
	return err
}

const deleteLogLevelById = `-- name: DeleteLogLevelById :exec
DELETE FROM log_levels
WHERE id = ?
`

type DeleteLogLevelByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteLogLevelById
//
//	DELETE FROM log_levels
//	WHERE id = ?
func (q *Queries) DeleteLogLevelById(ctx context.Context, arg DeleteLogLevelByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteLogLevelById, arg.ID)
	return err
}

const deleteNotificationById = `-- name: DeleteNotificationById :exec
DELETE FROM notifications
WHERE id = ?
`

type DeleteNotificationByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteNotificationById
//
//	DELETE FROM notifications
//	WHERE id = ?
func (q *Queries) DeleteNotificationById(ctx context.Context, arg DeleteNotificationByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteNotificationById, arg.ID)
	return err
}

const deleteRequestById = `-- name: DeleteRequestById :exec
DELETE FROM requests
WHERE id = ?
`

type DeleteRequestByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteRequestById
//
//	DELETE FROM requests
//	WHERE id = ?
func (q *Queries) DeleteRequestById(ctx context.Context, arg DeleteRequestByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteRequestById, arg.ID)
	return err
}

const deleteResponseById = `-- name: DeleteResponseById :exec
DELETE FROM responses
WHERE id = ?
`

type DeleteResponseByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteResponseById
//
//	DELETE FROM responses
//	WHERE id = ?
func (q *Queries) DeleteResponseById(ctx context.Context, arg DeleteResponseByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteResponseById, arg.ID)
	return err
}

const getLogById = `-- name: GetLogById :one

SELECT id, value, created_at, request_id, response_id, notification_id
FROM logs
WHERE id = ?
`

type GetLogByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// ****************************************************************************
//
//	SELECT id, value, created_at, request_id, response_id, notification_id
//	FROM logs
//	WHERE id = ?
func (q *Queries) GetLogById(ctx context.Context, arg GetLogByIdParams) (*Log, error) {
	row := q.db.QueryRowContext(ctx, getLogById, arg.ID)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.RequestID,
		&i.ResponseID,
		&i.NotificationID,
	)
	return &i, err
}

const getLogLevelByName = `-- name: GetLogLevelByName :one
SELECT id, name
FROM log_levels
WHERE name = ?
`

type GetLogLevelByNameParams struct {
	Name string `db:"name" json:"name"`
}

// GetLogLevelByName
//
//	SELECT id, name
//	FROM log_levels
//	WHERE name = ?
func (q *Queries) GetLogLevelByName(ctx context.Context, arg GetLogLevelByNameParams) (*LogLevel, error) {
	row := q.db.QueryRowContext(ctx, getLogLevelByName, arg.Name)
	var i LogLevel
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getLogsByNotificationId = `-- name: GetLogsByNotificationId :many
SELECT id, value, created_at, request_id, response_id, notification_id
FROM logs
WHERE notification_id = ?
`

type GetLogsByNotificationIdParams struct {
	NotificationID *int64 `db:"notification_id" json:"notification_id"`
}

// GetLogsByNotificationId
//
//	SELECT id, value, created_at, request_id, response_id, notification_id
//	FROM logs
//	WHERE notification_id = ?
func (q *Queries) GetLogsByNotificationId(ctx context.Context, arg GetLogsByNotificationIdParams) ([]*Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByNotificationId, arg.NotificationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.CreatedAt,
			&i.RequestID,
			&i.ResponseID,
			&i.NotificationID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByRequestId = `-- name: GetLogsByRequestId :many
SELECT id, value, created_at, request_id, response_id, notification_id
FROM logs
WHERE request_id = ?
`

type GetLogsByRequestIdParams struct {
	RequestID *int64 `db:"request_id" json:"request_id"`
}

// GetLogsByRequestId
//
//	SELECT id, value, created_at, request_id, response_id, notification_id
//	FROM logs
//	WHERE request_id = ?
func (q *Queries) GetLogsByRequestId(ctx context.Context, arg GetLogsByRequestIdParams) ([]*Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByRequestId, arg.RequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.CreatedAt,
			&i.RequestID,
			&i.ResponseID,
			&i.NotificationID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByResponseId = `-- name: GetLogsByResponseId :many
SELECT id, value, created_at, request_id, response_id, notification_id
FROM logs
WHERE response_id = ?
`

type GetLogsByResponseIdParams struct {
	ResponseID *int64 `db:"response_id" json:"response_id"`
}

// GetLogsByResponseId
//
//	SELECT id, value, created_at, request_id, response_id, notification_id
//	FROM logs
//	WHERE response_id = ?
func (q *Queries) GetLogsByResponseId(ctx context.Context, arg GetLogsByResponseIdParams) ([]*Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByResponseId, arg.ResponseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.CreatedAt,
			&i.RequestID,
			&i.ResponseID,
			&i.NotificationID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationById = `-- name: GetNotificationById :one

SELECT id, method, created_at, updated_at
FROM notifications
WHERE id = ?
`

type GetNotificationByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// ****************************************************************************
//
//	SELECT id, method, created_at, updated_at
//	FROM notifications
//	WHERE id = ?
func (q *Queries) GetNotificationById(ctx context.Context, arg GetNotificationByIdParams) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationById, arg.ID)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Method,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getNotificationsByMethod = `-- name: GetNotificationsByMethod :many
SELECT id, method, created_at, updated_at
FROM notifications
WHERE method = ?
`

type GetNotificationsByMethodParams struct {
	Method string `db:"method" json:"method"`
}

// GetNotificationsByMethod
//
//	SELECT id, method, created_at, updated_at
//	FROM notifications
//	WHERE method = ?
func (q *Queries) GetNotificationsByMethod(ctx context.Context, arg GetNotificationsByMethodParams) ([]*Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByMethod, arg.Method)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Method,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequestById = `-- name: GetRequestById :one

SELECT id, rpc_method, rpc_id
FROM requests
WHERE id = ?
`

type GetRequestByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// ****************************************************************************
//
//	SELECT id, rpc_method, rpc_id
//	FROM requests
//	WHERE id = ?
func (q *Queries) GetRequestById(ctx context.Context, arg GetRequestByIdParams) (*Request, error) {
	row := q.db.QueryRowContext(ctx, getRequestById, arg.ID)
	var i Request
	err := row.Scan(&i.ID, &i.RpcMethod, &i.RpcID)
	return &i, err
}

const getRequestsByMethod = `-- name: GetRequestsByMethod :many
SELECT id, rpc_method, rpc_id
FROM requests
WHERE rpc_method = ?
`

type GetRequestsByMethodParams struct {
	RpcMethod string `db:"rpc_method" json:"rpc_method"`
}

// GetRequestsByMethod
//
//	SELECT id, rpc_method, rpc_id
//	FROM requests
//	WHERE rpc_method = ?
func (q *Queries) GetRequestsByMethod(ctx context.Context, arg GetRequestsByMethodParams) ([]*Request, error) {
	rows, err := q.db.QueryContext(ctx, getRequestsByMethod, arg.RpcMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(&i.ID, &i.RpcMethod, &i.RpcID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResponseById = `-- name: GetResponseById :one

SELECT id, rpc, rpc_id, result, error, created_at
FROM responses
WHERE id = ?
`

type GetResponseByIdParams struct {
	ID int64 `db:"id" json:"id"`
}

// ****************************************************************************
//
//	SELECT id, rpc, rpc_id, result, error, created_at
//	FROM responses
//	WHERE id = ?
func (q *Queries) GetResponseById(ctx context.Context, arg GetResponseByIdParams) (*Response, error) {
	row := q.db.QueryRowContext(ctx, getResponseById, arg.ID)
	var i Response
	err := row.Scan(
		&i.ID,
		&i.Rpc,
		&i.RpcID,
		&i.Result,
		&i.Error,
		&i.CreatedAt,
	)
	return &i, err
}

const getResponsesByRpcId = `-- name: GetResponsesByRpcId :many
SELECT id, rpc, rpc_id, result, error, created_at
FROM responses
WHERE rpc_id = ?
`

type GetResponsesByRpcIdParams struct {
	RpcID int64 `db:"rpc_id" json:"rpc_id"`
}

// GetResponsesByRpcId
//
//	SELECT id, rpc, rpc_id, result, error, created_at
//	FROM responses
//	WHERE rpc_id = ?
func (q *Queries) GetResponsesByRpcId(ctx context.Context, arg GetResponsesByRpcIdParams) ([]*Response, error) {
	rows, err := q.db.QueryContext(ctx, getResponsesByRpcId, arg.RpcID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Response
	for rows.Next() {
		var i Response
		if err := rows.Scan(
			&i.ID,
			&i.Rpc,
			&i.RpcID,
			&i.Result,
			&i.Error,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLog = `-- name: InsertLog :one
INSERT INTO logs (value, request_id, response_id, notification_id)
VALUES (?, ?, ?, ?) RETURNING id, value, created_at, request_id, response_id, notification_id
`

type InsertLogParams struct {
	Value          string `db:"value" json:"value"`
	RequestID      *int64 `db:"request_id" json:"request_id"`
	ResponseID     *int64 `db:"response_id" json:"response_id"`
	NotificationID *int64 `db:"notification_id" json:"notification_id"`
}

// InsertLog
//
//	INSERT INTO logs (value, request_id, response_id, notification_id)
//	VALUES (?, ?, ?, ?) RETURNING id, value, created_at, request_id, response_id, notification_id
func (q *Queries) InsertLog(ctx context.Context, arg InsertLogParams) (*Log, error) {
	row := q.db.QueryRowContext(ctx, insertLog,
		arg.Value,
		arg.RequestID,
		arg.ResponseID,
		arg.NotificationID,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.RequestID,
		&i.ResponseID,
		&i.NotificationID,
	)
	return &i, err
}

const insertLogLevel = `-- name: InsertLogLevel :one
INSERT INTO log_levels (name)
VALUES (?) RETURNING id, name
`

type InsertLogLevelParams struct {
	Name string `db:"name" json:"name"`
}

// InsertLogLevel
//
//	INSERT INTO log_levels (name)
//	VALUES (?) RETURNING id, name
func (q *Queries) InsertLogLevel(ctx context.Context, arg InsertLogLevelParams) (*LogLevel, error) {
	row := q.db.QueryRowContext(ctx, insertLogLevel, arg.Name)
	var i LogLevel
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const insertNotification = `-- name: InsertNotification :one
INSERT INTO notifications (method)
VALUES (?) RETURNING id, method, created_at, updated_at
`

type InsertNotificationParams struct {
	Method string `db:"method" json:"method"`
}

// InsertNotification
//
//	INSERT INTO notifications (method)
//	VALUES (?) RETURNING id, method, created_at, updated_at
func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, insertNotification, arg.Method)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Method,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertRequest = `-- name: InsertRequest :one
INSERT INTO requests (rpc_method, rpc_id)
VALUES (?, ?) RETURNING id, rpc_method, rpc_id
`

type InsertRequestParams struct {
	RpcMethod string `db:"rpc_method" json:"rpc_method"`
	RpcID     int64  `db:"rpc_id" json:"rpc_id"`
}

// InsertRequest
//
//	INSERT INTO requests (rpc_method, rpc_id)
//	VALUES (?, ?) RETURNING id, rpc_method, rpc_id
func (q *Queries) InsertRequest(ctx context.Context, arg InsertRequestParams) (*Request, error) {
	row := q.db.QueryRowContext(ctx, insertRequest, arg.RpcMethod, arg.RpcID)
	var i Request
	err := row.Scan(&i.ID, &i.RpcMethod, &i.RpcID)
	return &i, err
}

const insertResponse = `-- name: InsertResponse :one
INSERT INTO responses (rpc, rpc_id, result, error)
VALUES (?, ?, ?, ?) RETURNING id, rpc, rpc_id, result, error, created_at
`

type InsertResponseParams struct {
	Rpc    string  `db:"rpc" json:"rpc"`
	RpcID  int64   `db:"rpc_id" json:"rpc_id"`
	Result *string `db:"result" json:"result"`
	Error  *string `db:"error" json:"error"`
}

// InsertResponse
//
//	INSERT INTO responses (rpc, rpc_id, result, error)
//	VALUES (?, ?, ?, ?) RETURNING id, rpc, rpc_id, result, error, created_at
func (q *Queries) InsertResponse(ctx context.Context, arg InsertResponseParams) (*Response, error) {
	row := q.db.QueryRowContext(ctx, insertResponse,
		arg.Rpc,
		arg.RpcID,
		arg.Result,
		arg.Error,
	)
	var i Response
	err := row.Scan(
		&i.ID,
		&i.Rpc,
		&i.RpcID,
		&i.Result,
		&i.Error,
		&i.CreatedAt,
	)
	return &i, err
}

const updateLogById = `-- name: UpdateLogById :one
UPDATE logs
SET value = ?, request_id = ?, response_id = ?, notification_id = ?
WHERE id = ? RETURNING id, value, created_at, request_id, response_id, notification_id
`

type UpdateLogByIdParams struct {
	Value          string `db:"value" json:"value"`
	RequestID      *int64 `db:"request_id" json:"request_id"`
	ResponseID     *int64 `db:"response_id" json:"response_id"`
	NotificationID *int64 `db:"notification_id" json:"notification_id"`
	ID             int64  `db:"id" json:"id"`
}

// UpdateLogById
//
//	UPDATE logs
//	SET value = ?, request_id = ?, response_id = ?, notification_id = ?
//	WHERE id = ? RETURNING id, value, created_at, request_id, response_id, notification_id
func (q *Queries) UpdateLogById(ctx context.Context, arg UpdateLogByIdParams) (*Log, error) {
	row := q.db.QueryRowContext(ctx, updateLogById,
		arg.Value,
		arg.RequestID,
		arg.ResponseID,
		arg.NotificationID,
		arg.ID,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.RequestID,
		&i.ResponseID,
		&i.NotificationID,
	)
	return &i, err
}

const updateLogLevelById = `-- name: UpdateLogLevelById :one
UPDATE log_levels
SET name = ?
WHERE id = ?
RETURNING id, name
`

type UpdateLogLevelByIdParams struct {
	Name string `db:"name" json:"name"`
	ID   int64  `db:"id" json:"id"`
}

// UpdateLogLevelById
//
//	UPDATE log_levels
//	SET name = ?
//	WHERE id = ?
//	RETURNING id, name
func (q *Queries) UpdateLogLevelById(ctx context.Context, arg UpdateLogLevelByIdParams) (*LogLevel, error) {
	row := q.db.QueryRowContext(ctx, updateLogLevelById, arg.Name, arg.ID)
	var i LogLevel
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const updateNotificationById = `-- name: UpdateNotificationById :one
UPDATE notifications
SET method = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ? RETURNING id, method, created_at, updated_at
`

type UpdateNotificationByIdParams struct {
	Method string `db:"method" json:"method"`
	ID     int64  `db:"id" json:"id"`
}

// UpdateNotificationById
//
//	UPDATE notifications
//	SET method = ?, updated_at = CURRENT_TIMESTAMP
//	WHERE id = ? RETURNING id, method, created_at, updated_at
func (q *Queries) UpdateNotificationById(ctx context.Context, arg UpdateNotificationByIdParams) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, updateNotificationById, arg.Method, arg.ID)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Method,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateRequestById = `-- name: UpdateRequestById :one
UPDATE requests
SET rpc_method = ?, rpc_id = ?
WHERE id = ? RETURNING id, rpc_method, rpc_id
`

type UpdateRequestByIdParams struct {
	RpcMethod string `db:"rpc_method" json:"rpc_method"`
	RpcID     int64  `db:"rpc_id" json:"rpc_id"`
	ID        int64  `db:"id" json:"id"`
}

// UpdateRequestById
//
//	UPDATE requests
//	SET rpc_method = ?, rpc_id = ?
//	WHERE id = ? RETURNING id, rpc_method, rpc_id
func (q *Queries) UpdateRequestById(ctx context.Context, arg UpdateRequestByIdParams) (*Request, error) {
	row := q.db.QueryRowContext(ctx, updateRequestById, arg.RpcMethod, arg.RpcID, arg.ID)
	var i Request
	err := row.Scan(&i.ID, &i.RpcMethod, &i.RpcID)
	return &i, err
}

const updateResponseById = `-- name: UpdateResponseById :exec
UPDATE responses
SET rpc = ?, rpc_id = ?, result = ?, error = ?
WHERE id = ?
`

type UpdateResponseByIdParams struct {
	Rpc    string  `db:"rpc" json:"rpc"`
	RpcID  int64   `db:"rpc_id" json:"rpc_id"`
	Result *string `db:"result" json:"result"`
	Error  *string `db:"error" json:"error"`
	ID     int64   `db:"id" json:"id"`
}

// UpdateResponseById
//
//	UPDATE responses
//	SET rpc = ?, rpc_id = ?, result = ?, error = ?
//	WHERE id = ?
func (q *Queries) UpdateResponseById(ctx context.Context, arg UpdateResponseByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateResponseById,
		arg.Rpc,
		arg.RpcID,
		arg.Result,
		arg.Error,
		arg.ID,
	)
	return err
}
