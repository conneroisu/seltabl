// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package master

import (
	"context"
)

const deleteFileByID = `-- name: DeleteFileByID :exec
DELETE FROM
    files
WHERE
    id = ?
`

type DeleteFileByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteFileByID
//
//	DELETE FROM
//	    files
//	WHERE
//	    id = ?
func (q *Queries) DeleteFileByID(ctx context.Context, arg DeleteFileByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteFileByID, arg.ID)
	return err
}

const deleteHTMLByID = `-- name: DeleteHTMLByID :exec
DELETE FROM
    htmls
WHERE
    id = ?
`

type DeleteHTMLByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteHTMLByID
//
//	DELETE FROM
//	    htmls
//	WHERE
//	    id = ?
func (q *Queries) DeleteHTMLByID(ctx context.Context, arg DeleteHTMLByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteHTMLByID, arg.ID)
	return err
}

const deleteLineByID = `-- name: DeleteLineByID :exec
DELETE FROM
    lines
WHERE
    id = ?
`

type DeleteLineByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteLineByID
//
//	DELETE FROM
//	    lines
//	WHERE
//	    id = ?
func (q *Queries) DeleteLineByID(ctx context.Context, arg DeleteLineByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteLineByID, arg.ID)
	return err
}

const deleteSelectorByID = `-- name: DeleteSelectorByID :exec
DELETE FROM
	selectors
WHERE
	id = ?
`

type DeleteSelectorByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteSelectorByID
//
//	DELETE FROM
//		selectors
//	WHERE
//		id = ?
func (q *Queries) DeleteSelectorByID(ctx context.Context, arg DeleteSelectorByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteSelectorByID, arg.ID)
	return err
}

const deleteStructByID = `-- name: DeleteStructByID :exec
DELETE FROM
    structs
WHERE
    id = ?
`

type DeleteStructByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteStructByID
//
//	DELETE FROM
//	    structs
//	WHERE
//	    id = ?
func (q *Queries) DeleteStructByID(ctx context.Context, arg DeleteStructByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteStructByID, arg.ID)
	return err
}

const deleteTagByID = `-- name: DeleteTagByID :exec
DELETE FROM
    tags
WHERE
    id = ?
`

type DeleteTagByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteTagByID
//
//	DELETE FROM
//	    tags
//	WHERE
//	    id = ?
func (q *Queries) DeleteTagByID(ctx context.Context, arg DeleteTagByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteTagByID, arg.ID)
	return err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM
    urls
WHERE
    id = ?
`

type DeleteURLParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteURL
//
//	DELETE FROM
//	    urls
//	WHERE
//	    id = ?
func (q *Queries) DeleteURL(ctx context.Context, arg DeleteURLParams) error {
	_, err := q.db.ExecContext(ctx, deleteURL, arg.ID)
	return err
}

const getFileByID = `-- name: GetFileByID :one
SELECT
    id, uri, updated_at, created_at
FROM
    files
WHERE
    id = ? LIMIT 1
`

type GetFileByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// GetFileByID
//
//	SELECT
//	    id, uri, updated_at, created_at
//	FROM
//	    files
//	WHERE
//	    id = ? LIMIT 1
func (q *Queries) GetFileByID(ctx context.Context, arg GetFileByIDParams) (*File, error) {
	row := q.db.QueryRowContext(ctx, getFileByID, arg.ID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Uri,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const getFileByURI = `-- name: GetFileByURI :one
SELECT
    id, uri, updated_at, created_at
FROM
    files
WHERE
    uri = ?
`

type GetFileByURIParams struct {
	Uri string `db:"uri" json:"uri"`
}

// GetFileByURI
//
//	SELECT
//	    id, uri, updated_at, created_at
//	FROM
//	    files
//	WHERE
//	    uri = ?
func (q *Queries) GetFileByURI(ctx context.Context, arg GetFileByURIParams) (*File, error) {
	row := q.db.QueryRowContext(ctx, getFileByURI, arg.Uri)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Uri,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const getLineByID = `-- name: GetLineByID :one
SELECT
    id, value, number
FROM
    lines
WHERE
    id = ?
`

type GetLineByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

type GetLineByIDRow struct {
	ID     int64  `db:"id" json:"id"`
	Value  string `db:"value" json:"value"`
	Number int64  `db:"number" json:"number"`
}

// GetLineByID
//
//	SELECT
//	    id, value, number
//	FROM
//	    lines
//	WHERE
//	    id = ?
func (q *Queries) GetLineByID(ctx context.Context, arg GetLineByIDParams) (*GetLineByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getLineByID, arg.ID)
	var i GetLineByIDRow
	err := row.Scan(&i.ID, &i.Value, &i.Number)
	return &i, err
}

const getSelectorByID = `-- name: GetSelectorByID :one
SELECT
	id, value, url_id, occurances, context
FROM
	selectors
WHERE
	id = ?
`

type GetSelectorByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// GetSelectorByID
//
//	SELECT
//		id, value, url_id, occurances, context
//	FROM
//		selectors
//	WHERE
//		id = ?
func (q *Queries) GetSelectorByID(ctx context.Context, arg GetSelectorByIDParams) (*Selector, error) {
	row := q.db.QueryRowContext(ctx, getSelectorByID, arg.ID)
	var i Selector
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.Occurances,
		&i.Context,
	)
	return &i, err
}

const getSelectorByValue = `-- name: GetSelectorByValue :one
SELECT
	id, value, url_id, occurances, context
FROM
	selectors
WHERE
	value = ?
`

type GetSelectorByValueParams struct {
	Value string `db:"value" json:"value"`
}

// GetSelectorByValue
//
//	SELECT
//		id, value, url_id, occurances, context
//	FROM
//		selectors
//	WHERE
//		value = ?
func (q *Queries) GetSelectorByValue(ctx context.Context, arg GetSelectorByValueParams) (*Selector, error) {
	row := q.db.QueryRowContext(ctx, getSelectorByValue, arg.Value)
	var i Selector
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.Occurances,
		&i.Context,
	)
	return &i, err
}

const getSelectorsByContext = `-- name: GetSelectorsByContext :many
SELECT
	id, value, url_id, occurances, context
FROM
	selectors
WHERE
	context = ?
`

type GetSelectorsByContextParams struct {
	Context string `db:"context" json:"context"`
}

// GetSelectorsByContext
//
//	SELECT
//		id, value, url_id, occurances, context
//	FROM
//		selectors
//	WHERE
//		context = ?
func (q *Queries) GetSelectorsByContext(ctx context.Context, arg GetSelectorsByContextParams) ([]*Selector, error) {
	rows, err := q.db.QueryContext(ctx, getSelectorsByContext, arg.Context)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Selector
	for rows.Next() {
		var i Selector
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.Occurances,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSelectorsByURL = `-- name: GetSelectorsByURL :many
SELECT
	selectors.id, selectors.value, selectors.url_id, selectors.occurances, selectors.context
FROM
	selectors
	JOIN urls ON urls.id = selectors.url_id
WHERE
	urls.value = ?
`

type GetSelectorsByURLParams struct {
	Value string `db:"value" json:"value"`
}

// GetSelectorsByURL
//
//	SELECT
//		selectors.id, selectors.value, selectors.url_id, selectors.occurances, selectors.context
//	FROM
//		selectors
//		JOIN urls ON urls.id = selectors.url_id
//	WHERE
//		urls.value = ?
func (q *Queries) GetSelectorsByURL(ctx context.Context, arg GetSelectorsByURLParams) ([]*Selector, error) {
	rows, err := q.db.QueryContext(ctx, getSelectorsByURL, arg.Value)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Selector
	for rows.Next() {
		var i Selector
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.Occurances,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructByID = `-- name: GetStructByID :one
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    id = ?
`

type GetStructByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// GetStructByID
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    id = ?
func (q *Queries) GetStructByID(ctx context.Context, arg GetStructByIDParams) (*Struct, error) {
	row := q.db.QueryRowContext(ctx, getStructByID, arg.ID)
	var i Struct
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.StartLineID,
		&i.EndLineID,
		&i.FileID,
		&i.Context,
	)
	return &i, err
}

const getStructByValue = `-- name: GetStructByValue :one
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    value = ?
`

type GetStructByValueParams struct {
	Value string `db:"value" json:"value"`
}

// GetStructByValue
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    value = ?
func (q *Queries) GetStructByValue(ctx context.Context, arg GetStructByValueParams) (*Struct, error) {
	row := q.db.QueryRowContext(ctx, getStructByValue, arg.Value)
	var i Struct
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.StartLineID,
		&i.EndLineID,
		&i.FileID,
		&i.Context,
	)
	return &i, err
}

const getStructsByEndLineID = `-- name: GetStructsByEndLineID :many
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    end_line_id = ?
`

type GetStructsByEndLineIDParams struct {
	EndLineID int64 `db:"end_line_id" json:"end_line_id"`
}

// GetStructsByEndLineID
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    end_line_id = ?
func (q *Queries) GetStructsByEndLineID(ctx context.Context, arg GetStructsByEndLineIDParams) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByEndLineID, arg.EndLineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructsByFileID = `-- name: GetStructsByFileID :many
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    file_id = ?
`

type GetStructsByFileIDParams struct {
	FileID int64 `db:"file_id" json:"file_id"`
}

// GetStructsByFileID
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    file_id = ?
func (q *Queries) GetStructsByFileID(ctx context.Context, arg GetStructsByFileIDParams) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByFileID, arg.FileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructsByFileIDAndEndLineID = `-- name: GetStructsByFileIDAndEndLineID :many
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    file_id = ? AND end_line_id = ?
`

type GetStructsByFileIDAndEndLineIDParams struct {
	FileID    int64 `db:"file_id" json:"file_id"`
	EndLineID int64 `db:"end_line_id" json:"end_line_id"`
}

// GetStructsByFileIDAndEndLineID
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    file_id = ? AND end_line_id = ?
func (q *Queries) GetStructsByFileIDAndEndLineID(ctx context.Context, arg GetStructsByFileIDAndEndLineIDParams) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByFileIDAndEndLineID, arg.FileID, arg.EndLineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructsByFileIDAndStartLineID = `-- name: GetStructsByFileIDAndStartLineID :many
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    file_id = ? AND start_line_id = ?
`

type GetStructsByFileIDAndStartLineIDParams struct {
	FileID      int64 `db:"file_id" json:"file_id"`
	StartLineID int64 `db:"start_line_id" json:"start_line_id"`
}

// GetStructsByFileIDAndStartLineID
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    file_id = ? AND start_line_id = ?
func (q *Queries) GetStructsByFileIDAndStartLineID(ctx context.Context, arg GetStructsByFileIDAndStartLineIDParams) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByFileIDAndStartLineID, arg.FileID, arg.StartLineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructsByStartLineEndlineRange = `-- name: GetStructsByStartLineEndlineRange :many
SELECT
    structs.id, structs.value, url_id, start_line_id, end_line_id, structs.file_id, context, lines.id, lines.file_id, lines.value, lines.number, lines2.id, lines2.file_id, lines2.value, lines2.number
FROM
    structs
JOIN lines ON lines.id = structs.start_line_id
JOIN lines AS lines2 ON lines2.id = structs.end_line_id
WHERE
    lines.number <= ? AND lines2.number >= ?
`

type GetStructsByStartLineEndlineRangeParams struct {
	Number   int64 `db:"number" json:"number"`
	Number_2 int64 `db:"number_2" json:"number_2"`
}

type GetStructsByStartLineEndlineRangeRow struct {
	ID          int64  `db:"id" json:"id"`
	Value       string `db:"value" json:"value"`
	UrlID       int64  `db:"url_id" json:"url_id"`
	StartLineID int64  `db:"start_line_id" json:"start_line_id"`
	EndLineID   int64  `db:"end_line_id" json:"end_line_id"`
	FileID      int64  `db:"file_id" json:"file_id"`
	Context     string `db:"context" json:"context"`
	ID_2        int64  `db:"id_2" json:"id_2"`
	FileID_2    int64  `db:"file_id_2" json:"file_id_2"`
	Value_2     string `db:"value_2" json:"value_2"`
	Number      int64  `db:"number" json:"number"`
	ID_3        int64  `db:"id_3" json:"id_3"`
	FileID_3    int64  `db:"file_id_3" json:"file_id_3"`
	Value_3     string `db:"value_3" json:"value_3"`
	Number_2    int64  `db:"number_2" json:"number_2"`
}

// GetStructsByStartLineEndlineRange
//
//	SELECT
//	    structs.id, structs.value, url_id, start_line_id, end_line_id, structs.file_id, context, lines.id, lines.file_id, lines.value, lines.number, lines2.id, lines2.file_id, lines2.value, lines2.number
//	FROM
//	    structs
//	JOIN lines ON lines.id = structs.start_line_id
//	JOIN lines AS lines2 ON lines2.id = structs.end_line_id
//	WHERE
//	    lines.number <= ? AND lines2.number >= ?
func (q *Queries) GetStructsByStartLineEndlineRange(ctx context.Context, arg GetStructsByStartLineEndlineRangeParams) ([]*GetStructsByStartLineEndlineRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByStartLineEndlineRange, arg.Number, arg.Number_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetStructsByStartLineEndlineRangeRow
	for rows.Next() {
		var i GetStructsByStartLineEndlineRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
			&i.ID_2,
			&i.FileID_2,
			&i.Value_2,
			&i.Number,
			&i.ID_3,
			&i.FileID_3,
			&i.Value_3,
			&i.Number_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructsByStartLineID = `-- name: GetStructsByStartLineID :many
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    start_line_id = ?
`

type GetStructsByStartLineIDParams struct {
	StartLineID int64 `db:"start_line_id" json:"start_line_id"`
}

// GetStructsByStartLineID
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    start_line_id = ?
func (q *Queries) GetStructsByStartLineID(ctx context.Context, arg GetStructsByStartLineIDParams) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByStartLineID, arg.StartLineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStructsByValue = `-- name: GetStructsByValue :many
SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
FROM
    structs
WHERE
    value = ?
`

type GetStructsByValueParams struct {
	Value string `db:"value" json:"value"`
}

// GetStructsByValue
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	FROM
//	    structs
//	WHERE
//	    value = ?
func (q *Queries) GetStructsByValue(ctx context.Context, arg GetStructsByValueParams) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, getStructsByValue, arg.Value)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagByFieldIDAndValue = `-- name: GetTagByFieldIDAndValue :one
SELECT
    id, value, start, "end", line_id, field_id
FROM
    tags
WHERE
    field_id = ? AND value = ?
`

type GetTagByFieldIDAndValueParams struct {
	FieldID int64  `db:"field_id" json:"field_id"`
	Value   string `db:"value" json:"value"`
}

// GetTagByFieldIDAndValue
//
//	SELECT
//	    id, value, start, "end", line_id, field_id
//	FROM
//	    tags
//	WHERE
//	    field_id = ? AND value = ?
func (q *Queries) GetTagByFieldIDAndValue(ctx context.Context, arg GetTagByFieldIDAndValueParams) (*Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByFieldIDAndValue, arg.FieldID, arg.Value)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Start,
		&i.End,
		&i.LineID,
		&i.FieldID,
	)
	return &i, err
}

const getTagByID = `-- name: GetTagByID :one
SELECT
    id, value, start, "end", line_id, field_id
FROM
    tags
WHERE
    id = ?
`

type GetTagByIDParams struct {
	ID int64 `db:"id" json:"id"`
}

// GetTagByID
//
//	SELECT
//	    id, value, start, "end", line_id, field_id
//	FROM
//	    tags
//	WHERE
//	    id = ?
func (q *Queries) GetTagByID(ctx context.Context, arg GetTagByIDParams) (*Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByID, arg.ID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Start,
		&i.End,
		&i.LineID,
		&i.FieldID,
	)
	return &i, err
}

const getTagByValue = `-- name: GetTagByValue :one
SELECT
    id, value, start, "end", line_id, field_id
FROM
    tags
WHERE
    value = ?
`

type GetTagByValueParams struct {
	Value string `db:"value" json:"value"`
}

// GetTagByValue
//
//	SELECT
//	    id, value, start, "end", line_id, field_id
//	FROM
//	    tags
//	WHERE
//	    value = ?
func (q *Queries) GetTagByValue(ctx context.Context, arg GetTagByValueParams) (*Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByValue, arg.Value)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Start,
		&i.End,
		&i.LineID,
		&i.FieldID,
	)
	return &i, err
}

const getTagsByFieldID = `-- name: GetTagsByFieldID :many
SELECT
    id, value, start, "end", line_id, field_id
FROM
    tags
WHERE
    field_id = ?
`

type GetTagsByFieldIDParams struct {
	FieldID int64 `db:"field_id" json:"field_id"`
}

// GetTagsByFieldID
//
//	SELECT
//	    id, value, start, "end", line_id, field_id
//	FROM
//	    tags
//	WHERE
//	    field_id = ?
func (q *Queries) GetTagsByFieldID(ctx context.Context, arg GetTagsByFieldIDParams) ([]*Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByFieldID, arg.FieldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Start,
			&i.End,
			&i.LineID,
			&i.FieldID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLByValue = `-- name: GetURLByValue :one
SELECT
    id, value, html_id
FROM
    urls
WHERE
    value = ?
`

type GetURLByValueParams struct {
	Value string `db:"value" json:"value"`
}

// GetURLByValue
//
//	SELECT
//	    id, value, html_id
//	FROM
//	    urls
//	WHERE
//	    value = ?
func (q *Queries) GetURLByValue(ctx context.Context, arg GetURLByValueParams) (*Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByValue, arg.Value)
	var i Url
	err := row.Scan(&i.ID, &i.Value, &i.HtmlID)
	return &i, err
}

const insertFile = `-- name: InsertFile :one
INSERT INTO
    files (uri)
VALUES
    (?) RETURNING id, uri, updated_at, created_at
`

type InsertFileParams struct {
	Uri string `db:"uri" json:"uri"`
}

// InsertFile
//
//	INSERT INTO
//	    files (uri)
//	VALUES
//	    (?) RETURNING id, uri, updated_at, created_at
func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) (*File, error) {
	row := q.db.QueryRowContext(ctx, insertFile, arg.Uri)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Uri,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const insertHTML = `-- name: InsertHTML :one
INSERT OR IGNORE INTO
    htmls (value)
VALUES
    (?) RETURNING id, value, updated_at, created_at
`

type InsertHTMLParams struct {
	Value string `db:"value" json:"value"`
}

// InsertHTML
//
//	INSERT OR IGNORE INTO
//	    htmls (value)
//	VALUES
//	    (?) RETURNING id, value, updated_at, created_at
func (q *Queries) InsertHTML(ctx context.Context, arg InsertHTMLParams) (*Html, error) {
	row := q.db.QueryRowContext(ctx, insertHTML, arg.Value)
	var i Html
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const insertLine = `-- name: InsertLine :one
INSERT INTO
    lines (value)
VALUES
    (?) RETURNING id, value, number
`

type InsertLineParams struct {
	Value string `db:"value" json:"value"`
}

type InsertLineRow struct {
	ID     int64  `db:"id" json:"id"`
	Value  string `db:"value" json:"value"`
	Number int64  `db:"number" json:"number"`
}

// InsertLine
//
//	INSERT INTO
//	    lines (value)
//	VALUES
//	    (?) RETURNING id, value, number
func (q *Queries) InsertLine(ctx context.Context, arg InsertLineParams) (*InsertLineRow, error) {
	row := q.db.QueryRowContext(ctx, insertLine, arg.Value)
	var i InsertLineRow
	err := row.Scan(&i.ID, &i.Value, &i.Number)
	return &i, err
}

const insertSelector = `-- name: InsertSelector :one

/*
 ** selectors.sql
 ** Description: This file contains the SQLite queries for the selectors table
 ** Dialect: sqlite3
 */
INSERT INTO
	selectors (value, url_id, context, occurances)
VALUES
	(?, ?, ?, ?) RETURNING id, value, url_id, occurances, context
`

type InsertSelectorParams struct {
	Value      string `db:"value" json:"value"`
	UrlID      int64  `db:"url_id" json:"url_id"`
	Context    string `db:"context" json:"context"`
	Occurances int64  `db:"occurances" json:"occurances"`
}

// ****************************************************************************
// ****************************************************************************
//
//	/*
//	 ** selectors.sql
//	 ** Description: This file contains the SQLite queries for the selectors table
//	 ** Dialect: sqlite3
//	 */
//	INSERT INTO
//		selectors (value, url_id, context, occurances)
//	VALUES
//		(?, ?, ?, ?) RETURNING id, value, url_id, occurances, context
func (q *Queries) InsertSelector(ctx context.Context, arg InsertSelectorParams) (*Selector, error) {
	row := q.db.QueryRowContext(ctx, insertSelector,
		arg.Value,
		arg.UrlID,
		arg.Context,
		arg.Occurances,
	)
	var i Selector
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.Occurances,
		&i.Context,
	)
	return &i, err
}

const insertStruct = `-- name: InsertStruct :one
INSERT INTO
    structs (file_id, start_line_id, end_line_id, value)
VALUES
    (?, ?, ?, ?) RETURNING id, value, url_id, start_line_id, end_line_id, file_id, context
`

type InsertStructParams struct {
	FileID      int64  `db:"file_id" json:"file_id"`
	StartLineID int64  `db:"start_line_id" json:"start_line_id"`
	EndLineID   int64  `db:"end_line_id" json:"end_line_id"`
	Value       string `db:"value" json:"value"`
}

// InsertStruct
//
//	INSERT INTO
//	    structs (file_id, start_line_id, end_line_id, value)
//	VALUES
//	    (?, ?, ?, ?) RETURNING id, value, url_id, start_line_id, end_line_id, file_id, context
func (q *Queries) InsertStruct(ctx context.Context, arg InsertStructParams) (*Struct, error) {
	row := q.db.QueryRowContext(ctx, insertStruct,
		arg.FileID,
		arg.StartLineID,
		arg.EndLineID,
		arg.Value,
	)
	var i Struct
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.StartLineID,
		&i.EndLineID,
		&i.FileID,
		&i.Context,
	)
	return &i, err
}

const insertTag = `-- name: InsertTag :exec
INSERT INTO
    tags (value, start, end, line_id, field_id)
VALUES
    (?, ?, ?, ?, ?)
`

type InsertTagParams struct {
	Value   string `db:"value" json:"value"`
	Start   int64  `db:"start" json:"start"`
	End     int64  `db:"end" json:"end"`
	LineID  int64  `db:"line_id" json:"line_id"`
	FieldID int64  `db:"field_id" json:"field_id"`
}

// InsertTag
//
//	INSERT INTO
//	    tags (value, start, end, line_id, field_id)
//	VALUES
//	    (?, ?, ?, ?, ?)
func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) error {
	_, err := q.db.ExecContext(ctx, insertTag,
		arg.Value,
		arg.Start,
		arg.End,
		arg.LineID,
		arg.FieldID,
	)
	return err
}

const insertURL = `-- name: InsertURL :one
INSERT INTO
    urls (value, html_id)
VALUES
    (?, ?) RETURNING id, value, html_id
`

type InsertURLParams struct {
	Value  string `db:"value" json:"value"`
	HtmlID int64  `db:"html_id" json:"html_id"`
}

// InsertURL
//
//	INSERT INTO
//	    urls (value, html_id)
//	VALUES
//	    (?, ?) RETURNING id, value, html_id
func (q *Queries) InsertURL(ctx context.Context, arg InsertURLParams) (*Url, error) {
	row := q.db.QueryRowContext(ctx, insertURL, arg.Value, arg.HtmlID)
	var i Url
	err := row.Scan(&i.ID, &i.Value, &i.HtmlID)
	return &i, err
}

const listAll = `-- name: ListAll :many
SELECT
    urls.id,
    urls.value,
    htmls.value as html,
    selectors.value as selector
FROM
    urls
    JOIN htmls ON urls.html_id = htmls.id
    JOIN selectors ON urls.id = selectors.url_id
`

type ListAllRow struct {
	ID       int64  `db:"id" json:"id"`
	Value    string `db:"value" json:"value"`
	Html     string `db:"html" json:"html"`
	Selector string `db:"selector" json:"selector"`
}

// ListAll
//
//	SELECT
//	    urls.id,
//	    urls.value,
//	    htmls.value as html,
//	    selectors.value as selector
//	FROM
//	    urls
//	    JOIN htmls ON urls.html_id = htmls.id
//	    JOIN selectors ON urls.id = selectors.url_id
func (q *Queries) ListAll(ctx context.Context) ([]*ListAllRow, error) {
	rows, err := q.db.QueryContext(ctx, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListAllRow
	for rows.Next() {
		var i ListAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Html,
			&i.Selector,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFiles = `-- name: ListFiles :many
/*
** File: files.sql
** Description: This file contains the SQLite queries for the files table
** Dialect: sqlite3
*/

SELECT
    id, uri, updated_at, created_at
from
    files
`

// ****************************************************************************
//
//	/*
//	** File: files.sql
//	** Description: This file contains the SQLite queries for the files table
//	** Dialect: sqlite3
//	*/
//
//	SELECT
//	    id, uri, updated_at, created_at
//	from
//	    files
func (q *Queries) ListFiles(ctx context.Context) ([]*File, error) {
	rows, err := q.db.QueryContext(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Uri,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHTMLs = `-- name: ListHTMLs :many

/* 
 ** File: htmls.sql
 ** Description: This file contains the SQLite queries for the htmls table
 ** Dialect: sqlite3
 */
SELECT
    id, value, updated_at, created_at
from
    htmls
`

// ****************************************************************************
// ****************************************************************************
//
//	/*
//	 ** File: htmls.sql
//	 ** Description: This file contains the SQLite queries for the htmls table
//	 ** Dialect: sqlite3
//	 */
//	SELECT
//	    id, value, updated_at, created_at
//	from
//	    htmls
func (q *Queries) ListHTMLs(ctx context.Context) ([]*Html, error) {
	rows, err := q.db.QueryContext(ctx, listHTMLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Html
	for rows.Next() {
		var i Html
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLines = `-- name: ListLines :many

/*
** File: lines.sql
** Description: This file contains the SQLite queries for the lines table
** Dialect: sqlite3
*/

SELECT
    id, file_id, value, number
from
    lines
`

// ****************************************************************************
// ****************************************************************************
//
//	/*
//	** File: lines.sql
//	** Description: This file contains the SQLite queries for the lines table
//	** Dialect: sqlite3
//	*/
//
//	SELECT
//	    id, file_id, value, number
//	from
//	    lines
func (q *Queries) ListLines(ctx context.Context) ([]*Line, error) {
	rows, err := q.db.QueryContext(ctx, listLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Line
	for rows.Next() {
		var i Line
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.Value,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStructs = `-- name: ListStructs :many

/*
** File: structs.sql
** Description: This file contains the SQLite queries for the structs table
** Dialect: sqlite3
*/

SELECT
    id, value, url_id, start_line_id, end_line_id, file_id, context
from
    structs
`

// ****************************************************************************
// ****************************************************************************
//
//	/*
//	** File: structs.sql
//	** Description: This file contains the SQLite queries for the structs table
//	** Dialect: sqlite3
//	*/
//
//	SELECT
//	    id, value, url_id, start_line_id, end_line_id, file_id, context
//	from
//	    structs
func (q *Queries) ListStructs(ctx context.Context) ([]*Struct, error) {
	rows, err := q.db.QueryContext(ctx, listStructs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Struct
	for rows.Next() {
		var i Struct
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.UrlID,
			&i.StartLineID,
			&i.EndLineID,
			&i.FileID,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many

/*
** File: tags.sql
** Description: This file contains the SQLite queries for the tags table
** Dialect: sqlite3
*/

SELECT
    id, value, start, "end", line_id, field_id
from
    tags
`

// ****************************************************************************
// ****************************************************************************
//
//	/*
//	** File: tags.sql
//	** Description: This file contains the SQLite queries for the tags table
//	** Dialect: sqlite3
//	*/
//
//	SELECT
//	    id, value, start, "end", line_id, field_id
//	from
//	    tags
func (q *Queries) ListTags(ctx context.Context) ([]*Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Start,
			&i.End,
			&i.LineID,
			&i.FieldID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listURLs = `-- name: ListURLs :many
/*
 ** File: urls.sql
 ** Description: This file contains the SQLite queries for the urls table
 ** Dialect: sqlite3
 */
SELECT
    id, value, html_id
from
    urls
`

// ****************************************************************************
//
//	/*
//	 ** File: urls.sql
//	 ** Description: This file contains the SQLite queries for the urls table
//	 ** Dialect: sqlite3
//	 */
//	SELECT
//	    id, value, html_id
//	from
//	    urls
func (q *Queries) ListURLs(ctx context.Context) ([]*Url, error) {
	rows, err := q.db.QueryContext(ctx, listURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.ID, &i.Value, &i.HtmlID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileByID = `-- name: UpdateFileByID :one
UPDATE
    files
SET
    uri = ?
WHERE
    id = ? RETURNING id, uri, updated_at, created_at
`

type UpdateFileByIDParams struct {
	Uri string `db:"uri" json:"uri"`
	ID  int64  `db:"id" json:"id"`
}

// UpdateFileByID
//
//	UPDATE
//	    files
//	SET
//	    uri = ?
//	WHERE
//	    id = ? RETURNING id, uri, updated_at, created_at
func (q *Queries) UpdateFileByID(ctx context.Context, arg UpdateFileByIDParams) (*File, error) {
	row := q.db.QueryRowContext(ctx, updateFileByID, arg.Uri, arg.ID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Uri,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const updateHTMLByID = `-- name: UpdateHTMLByID :one
UPDATE
    htmls
SET
    value = ?
WHERE
    id = ? RETURNING id, value, updated_at, created_at
`

type UpdateHTMLByIDParams struct {
	Value string `db:"value" json:"value"`
	ID    int64  `db:"id" json:"id"`
}

// UpdateHTMLByID
//
//	UPDATE
//	    htmls
//	SET
//	    value = ?
//	WHERE
//	    id = ? RETURNING id, value, updated_at, created_at
func (q *Queries) UpdateHTMLByID(ctx context.Context, arg UpdateHTMLByIDParams) (*Html, error) {
	row := q.db.QueryRowContext(ctx, updateHTMLByID, arg.Value, arg.ID)
	var i Html
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const updateLineByID = `-- name: UpdateLineByID :one
UPDATE
    lines
SET
    value = ?
WHERE
    id = ? RETURNING id, value, number
`

type UpdateLineByIDParams struct {
	Value string `db:"value" json:"value"`
	ID    int64  `db:"id" json:"id"`
}

type UpdateLineByIDRow struct {
	ID     int64  `db:"id" json:"id"`
	Value  string `db:"value" json:"value"`
	Number int64  `db:"number" json:"number"`
}

// UpdateLineByID
//
//	UPDATE
//	    lines
//	SET
//	    value = ?
//	WHERE
//	    id = ? RETURNING id, value, number
func (q *Queries) UpdateLineByID(ctx context.Context, arg UpdateLineByIDParams) (*UpdateLineByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateLineByID, arg.Value, arg.ID)
	var i UpdateLineByIDRow
	err := row.Scan(&i.ID, &i.Value, &i.Number)
	return &i, err
}

const updateSelectorByID = `-- name: UpdateSelectorByID :exec
UPDATE
	selectors
SET
	value = ?,
	url_id = ?,
	context = ?,
	occurances = ?
WHERE
	id = ?
`

type UpdateSelectorByIDParams struct {
	Value      string `db:"value" json:"value"`
	UrlID      int64  `db:"url_id" json:"url_id"`
	Context    string `db:"context" json:"context"`
	Occurances int64  `db:"occurances" json:"occurances"`
	ID         int64  `db:"id" json:"id"`
}

// UpdateSelectorByID
//
//	UPDATE
//		selectors
//	SET
//		value = ?,
//		url_id = ?,
//		context = ?,
//		occurances = ?
//	WHERE
//		id = ?
func (q *Queries) UpdateSelectorByID(ctx context.Context, arg UpdateSelectorByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateSelectorByID,
		arg.Value,
		arg.UrlID,
		arg.Context,
		arg.Occurances,
		arg.ID,
	)
	return err
}

const updateStructByID = `-- name: UpdateStructByID :one
UPDATE
    structs
SET
    value = ?,
    start_line_id = ?,
    end_line_id = ?
WHERE
    id = ? RETURNING id, value, url_id, start_line_id, end_line_id, file_id, context
`

type UpdateStructByIDParams struct {
	Value       string `db:"value" json:"value"`
	StartLineID int64  `db:"start_line_id" json:"start_line_id"`
	EndLineID   int64  `db:"end_line_id" json:"end_line_id"`
	ID          int64  `db:"id" json:"id"`
}

// UpdateStructByID
//
//	UPDATE
//	    structs
//	SET
//	    value = ?,
//	    start_line_id = ?,
//	    end_line_id = ?
//	WHERE
//	    id = ? RETURNING id, value, url_id, start_line_id, end_line_id, file_id, context
func (q *Queries) UpdateStructByID(ctx context.Context, arg UpdateStructByIDParams) (*Struct, error) {
	row := q.db.QueryRowContext(ctx, updateStructByID,
		arg.Value,
		arg.StartLineID,
		arg.EndLineID,
		arg.ID,
	)
	var i Struct
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.UrlID,
		&i.StartLineID,
		&i.EndLineID,
		&i.FileID,
		&i.Context,
	)
	return &i, err
}

const updateTagByID = `-- name: UpdateTagByID :exec
UPDATE
    tags
SET
    value = ?,
    start = ?,
    end = ?,
    line_id = ?,
    field_id = ?
WHERE
    id = ?
`

type UpdateTagByIDParams struct {
	Value   string `db:"value" json:"value"`
	Start   int64  `db:"start" json:"start"`
	End     int64  `db:"end" json:"end"`
	LineID  int64  `db:"line_id" json:"line_id"`
	FieldID int64  `db:"field_id" json:"field_id"`
	ID      int64  `db:"id" json:"id"`
}

// UpdateTagByID
//
//	UPDATE
//	    tags
//	SET
//	    value = ?,
//	    start = ?,
//	    end = ?,
//	    line_id = ?,
//	    field_id = ?
//	WHERE
//	    id = ?
func (q *Queries) UpdateTagByID(ctx context.Context, arg UpdateTagByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateTagByID,
		arg.Value,
		arg.Start,
		arg.End,
		arg.LineID,
		arg.FieldID,
		arg.ID,
	)
	return err
}

const updateURL = `-- name: UpdateURL :exec
UPDATE
    urls
SET
    value = ?,
    html_id = ?
WHERE
    id = ?
`

type UpdateURLParams struct {
	Value  string `db:"value" json:"value"`
	HtmlID int64  `db:"html_id" json:"html_id"`
	ID     int64  `db:"id" json:"id"`
}

// UpdateURL
//
//	UPDATE
//	    urls
//	SET
//	    value = ?,
//	    html_id = ?
//	WHERE
//	    id = ?
func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) error {
	_, err := q.db.ExecContext(ctx, updateURL, arg.Value, arg.HtmlID, arg.ID)
	return err
}

const upsertURL = `-- name: UpsertURL :one
INSERT INTO
    urls (value, html_id)
VALUES
    (?, ?)
ON CONFLICT (value)
DO UPDATE
    SET
        html_id = excluded.html_id RETURNING id, value, html_id
`

type UpsertURLParams struct {
	Value  string `db:"value" json:"value"`
	HtmlID int64  `db:"html_id" json:"html_id"`
}

// UpsertURL
//
//	INSERT INTO
//	    urls (value, html_id)
//	VALUES
//	    (?, ?)
//	ON CONFLICT (value)
//	DO UPDATE
//	    SET
//	        html_id = excluded.html_id RETURNING id, value, html_id
func (q *Queries) UpsertURL(ctx context.Context, arg UpsertURLParams) (*Url, error) {
	row := q.db.QueryRowContext(ctx, upsertURL, arg.Value, arg.HtmlID)
	var i Url
	err := row.Scan(&i.ID, &i.Value, &i.HtmlID)
	return &i, err
}
