{{/*
Test File Template
================================================================================
*/}}
{{- define "test_file" -}}
// Code generated by seltabls - DO NOT EDIT
//
// seltabls: version: v{{ .Version }}
package {{ .PackageName }}

import (
	_ "embed"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/conneroisu/seltabl/tools/seltabls/pkg/generate"
	"github.com/conneroisu/seltabl"
)

// {{ .Name }}Seltabl is the seltabl configuration for the {{ .Name }} struct.
//
//go:embed {{ .Name }}_seltabl.yaml
var {{ .Name }}Seltabl string

// Test{{ .Name }} tests the {{ .Name }} struct.
func Test{{ .Name }}(t *testing.T) {
	a := assert.New(t)
	// Read the configuration file.
	var config generate.ConfigFile
	err = generate.ReadConfigFile("{{ .Name }}_seltabl.yaml", &config)
	a.NoError(err)
	body := config.HTMLBody
	result, err := seltabl.NewFromString[{{ .Name }}](body)
	a.NoError(err)
	a.NotNil(result)
}
{{- end -}}

{{/*
Struct File Template
================================================================================
*/}}
{{- define "struct_file" -}}
package {{ .PackageName }}

// {{ .Name }} is a struct for a {{ .Name }}
// @url: {{ .URL }}
// @ignore-elements: {{ range $i, $element := .IgnoreElements }}{{ if $i }}, {{ end }}{{ $element }}{{ end }}
type {{ .Name }} struct {
	{{ range $i, $field := .Fields }}
		// {{ $field.Name }} - {{ $field.Description }}
		{{ $field.Name }} {{ $field.Type }} `json:"{{ $field.Name }}" hSel:"{{ $field.HeaderSelector }}" dSel:"{{ $field.DataSelector }}" ctl:"{{ $field.ControlSelector }}" {{ if $field.MustBePresent }}must:"{{ $field.MustBePresent }}"{{ end }}`
	{{ end }}
}}
{{- end -}}
