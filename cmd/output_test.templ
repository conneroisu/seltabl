package main

templ OutputTestDoc(cfg SeltablConfig) {
	{ string(`package main

import (
	"encoding/json"
	"reflect"
	"testing"
	_ "embed"
	"github.com/conneroisu/seltabl"
)

// fixtureFile is a test fixture file to scrape.
//
//go:embed `) }{ cfg.OutputFile }{ string(`
var fixtureFile string

// honestFile is a single line manually extracted from the fixture
//
//go:embed `) }{ cfg.InputFile }{ string(`
var honestFile string

// jsonToMap converts a JSON string to a map[string]interface{}.
func jsonToMap(jsonStr string) map[string]interface{} {
	result := make(map[string]interface{})
	json.Unmarshal([]byte(jsonStr), &result)
	return result
}

func jsonArrayToMap(jsonStr string) []map[string]interface{} {
	result := make([]map[string]interface{}, 0)
	json.Unmarshal([]byte(jsonStr), &result)
	return result
}

// isEqual checks if two JSON objects are equal.
func isEqual(a, b map[string]interface{}) bool {
	return reflect.DeepEqual(a, b)
}

// contains checks if the larger JSON array contains the smaller JSON object.
func contains(larger []map[string]interface{}, smaller map[string]interface{}) bool {
	for _, obj := range larger {
		if isEqual(obj, smaller) {
			return true
		}
	}
	return false
}

func TestScrape(t *testing.T) {
	output, err := Scrape("`) }{ cfg.URL }{ string(`")
	if err != nil {
		t.Fatalf("failed to scrape: %v", err)
	}
	jsonMap := jsonArrayToMap(output)
	outputMap := jsonToMap(honestFile)
	if !contains(jsonMap, outputMap) {
		t.Errorf("expected trusted/known output: \n%v to be in scraped output: \n%v", outputMap, jsonMap)
	}
}

// Scrape scrapes the given URL and returns the output.
func Scrape(url string) (`) }{ cfg.PackageName }{ string(`, error) {
	outputs, err := seltabl.NewFromURL[`) }{ cfg.PackageName }{ string(`](url)
	if err != nil {
		return "", err
	}
	var output []`) }{ cfg.PackageName }{ string(`
	for _, output := range outputs {
		output = append(output, output)
	}
	return output, nil
}
`) }
}
