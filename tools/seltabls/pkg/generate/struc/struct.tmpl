{{- define "prompt" -}}
You are to generate a json schema for a given url, {{ .URL }}.

The json schema must have a number of attributes for each field in the struct.

- header selector: used to find the header row and column for the field in the given struct.
- data-selector: used to find the data column for the field in the given struct.
- query-selector: used to query for the inner text or attribute of the cell.
- control-selector: used to control what to query for the inner text or attribute of the cell.
- must-be-present: used to ensure that the field is present in the given url.

Example Output:

```go
{
	"fields": [
		{
			"name": "Average Exit Velocity",
			"type": "int",
			"description": "The average exit velocity of the player's hits on the team stats page in meters per second. (mps)",
			"header-selector": "tr:nth-child(1) td:nth-child(1)",
			"data-selector": "tr:not(:nth-child(2)) td",
			"control-selector": "$text",
			"query-selector": "$text",
			"must-be-present": "must"
		}
	]
}
```

You must use the given url's html content to generate the golang struct.

Your html content:

{{ .Content }}

Your selectors with attriubutes (meaning without added specifiers; `:nth-child(1)`, `:not(:nth-child(2))`, etc):

```go
{{ .Selectors }}
```
{{- end -}}

{{- define "aggregate" -}}

You are to cogregate the following json schemas into a single comprehensive and accurate json schema designed to be used to select elements using css selectors.

- header selector: used to find the header row and column for the field in the given struct.
- data-selector: used to find the data column for the field in the given struct.
- query-selector: used to query for the inner text or attribute of the cell.
- control-selector: used to control what to query for the inner text or attribute of the cell.
- must-be-present: used to ensure that the field is present in the given url.

The valid base value selecors are:

{{ .Selectors }}

Your HTML content:

{{ .Content }}

Your json schemas:

{{ .Schemas }}

{{- end -}}

{{- define "struct" -}}
package {{ .Name }}

// {{ .Name }} is a struct for a {{ .Name }}
// @url: {{ .URL }}
// @ignore-elements: {{ range $i, $element := .IgnoreElements }}{{ if $i }}, {{ end }}{{ $element }}{{ end }}
type {{ .Name }} struct {
	{{ range $i, $field := .Fields }}
		// {{ $field.Name }} - {{ $field.Description }}
		{{ $field.Name }} {{ $field.Type }} `json:"{{ $field.Name }}" hSel:"{{ $field.HeaderSelector }}" dSel:"{{ $field.DataSelector }}" ctl:"{{ $field.ControlSelector }}" {{ if $field.MustBePresent }}must:"{{ $field.MustBePresent }}"{{ end }}`
	{{ end }}
}}

{{- end -}}

