// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package master

import (
	"context"
)

const deleteSelector = `-- name: DeleteSelector :exec
DELETE FROM selectors
WHERE id = ?
`

type DeleteSelectorParams struct {
	ID int64 `db:"id" json:"id"`
}

// DeleteSelector
//
//	DELETE FROM selectors
//	WHERE id = ?
func (q *Queries) DeleteSelector(ctx context.Context, arg DeleteSelectorParams) error {
	_, err := q.db.ExecContext(ctx, deleteSelector, arg.ID)
	return err
}

const insertSelector = `-- name: InsertSelector :one
INSERT INTO selectors (selector, url, context)
VALUES (?, ?, ?) RETURNING id, selector, url, context
`

type InsertSelectorParams struct {
	Selector string `db:"selector" json:"selector"`
	Url      string `db:"url" json:"url"`
	Context  string `db:"context" json:"context"`
}

// InsertSelector
//
//	INSERT INTO selectors (selector, url, context)
//	VALUES (?, ?, ?) RETURNING id, selector, url, context
func (q *Queries) InsertSelector(ctx context.Context, arg InsertSelectorParams) (Selector, error) {
	row := q.db.QueryRowContext(ctx, insertSelector, arg.Selector, arg.Url, arg.Context)
	var i Selector
	err := row.Scan(
		&i.ID,
		&i.Selector,
		&i.Url,
		&i.Context,
	)
	return i, err
}

const listSelectorsByURL = `-- name: ListSelectorsByURL :many
SELECT id, selector, url, context from selectors WHERE url = ?
`

type ListSelectorsByURLParams struct {
	Url string `db:"url" json:"url"`
}

// ListSelectorsByURL
//
//	SELECT id, selector, url, context from selectors WHERE url = ?
func (q *Queries) ListSelectorsByURL(ctx context.Context, arg ListSelectorsByURLParams) ([]Selector, error) {
	rows, err := q.db.QueryContext(ctx, listSelectorsByURL, arg.Url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Selector
	for rows.Next() {
		var i Selector
		if err := rows.Scan(
			&i.ID,
			&i.Selector,
			&i.Url,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSelector = `-- name: UpdateSelector :exec
UPDATE selectors
SET selector = ?, url = ?, context = ?
WHERE id = ?
`

type UpdateSelectorParams struct {
	Selector string `db:"selector" json:"selector"`
	Url      string `db:"url" json:"url"`
	Context  string `db:"context" json:"context"`
	ID       int64  `db:"id" json:"id"`
}

// UpdateSelector
//
//	UPDATE selectors
//	SET selector = ?, url = ?, context = ?
//	WHERE id = ?
func (q *Queries) UpdateSelector(ctx context.Context, arg UpdateSelectorParams) error {
	_, err := q.db.ExecContext(ctx, updateSelector,
		arg.Selector,
		arg.Url,
		arg.Context,
		arg.ID,
	)
	return err
}

const updateSelectorBySelector = `-- name: UpdateSelectorBySelector :exec
UPDATE selectors
SET selector = ?, url = ?, context = ?
WHERE selector = ?
`

type UpdateSelectorBySelectorParams struct {
	Selector   string `db:"selector" json:"selector"`
	Url        string `db:"url" json:"url"`
	Context    string `db:"context" json:"context"`
	Selector_2 string `db:"selector_2" json:"selector_2"`
}

// UpdateSelectorBySelector
//
//	UPDATE selectors
//	SET selector = ?, url = ?, context = ?
//	WHERE selector = ?
func (q *Queries) UpdateSelectorBySelector(ctx context.Context, arg UpdateSelectorBySelectorParams) error {
	_, err := q.db.ExecContext(ctx, updateSelectorBySelector,
		arg.Selector,
		arg.Url,
		arg.Context,
		arg.Selector_2,
	)
	return err
}
